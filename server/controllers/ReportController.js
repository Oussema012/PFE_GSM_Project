const fs = require('fs');
const path = require('path');
const PDFDocument = require('pdfkit');
const { ChartJSNodeCanvas } = require('chartjs-node-canvas');
const Alert = require('../models/Alert');
const Intervention = require('../models/Intervention');
const Report = require('../models/Report');

const generateAlertChartImage = async (alertStats) => {
  const width = 500;
  const height = 300;
  const chartJSNodeCanvas = new ChartJSNodeCanvas({ width, height });

  const configuration = {
    type: 'bar',
    data: {
      labels: ['Total', 'Active', 'Resolved'],
      datasets: [{
        label: 'Alert Statistics',
        data: [alertStats.total, alertStats.active, alertStats.resolved],
        backgroundColor: ['#36A2EB', '#FF6384', '#4BC0C0']
      }]
    },
    options: {
      plugins: {
        legend: { display: false },
        title: {
          display: true,
          text: 'Alert Status Distribution',
          font: { size: 16 }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: { precision: 0 }
        }
      }
    }
  };

  return await chartJSNodeCanvas.renderToBuffer(configuration);
};

exports.generateReport = async (req, res) => {
  try {
    const { siteId, fromDate, toDate, reportType = 'summary', generatedBy = 'system' } = req.body;

    const existingReport = await Report.findOne({
      siteId,
      fromDate: new Date(fromDate),
      toDate: new Date(toDate),
      reportType
    });

    if (existingReport) {
      return res.status(400).json({ message: 'Report already exists for the given date range and report type.' });
    }

    const startDate = new Date(fromDate);
    const endDate = toDate.length <= 10 ? 
      new Date(new Date(toDate).setHours(23, 59, 59, 999)) : 
      new Date(toDate);

    const alerts = await Alert.find({
      $or: [
        {
          site_id: siteId,
          $or: [
            { createdAt: { $gte: startDate, $lte: endDate } },
            { timestamp: { $gte: startDate, $lte: endDate } }
          ]
        },
        {
          siteId: siteId,
          $or: [
            { createdAt: { $gte: startDate, $lte: endDate } },
            { timestamp: { $gte: startDate, $lte: endDate } }
          ]
        }
      ]
    });

    const resolvedAlerts = alerts.filter(alert => alert.status === 'resolved');
    const activeAlerts = alerts.filter(alert => alert.status === 'active');

    const alertStats = {
      total: alerts.length,
      active: activeAlerts.length,
      resolved: resolvedAlerts.length,
    };

    const interventions = await Intervention.find({
      $or: [
        { site_id: siteId, createdAt: { $gte: startDate, $lte: endDate } },
        { siteId: siteId, createdAt: { $gte: startDate, $lte: endDate } }
      ]
    });

    const interventionStats = {
      total: interventions.length,
    };

    const reportData = {
      alertStats,
      interventionStats,
    };

    const report = new Report({
      siteId,
      reportType,
      fromDate: startDate,
      toDate: endDate,
      generatedBy,
      data: reportData
    });

    await report.save();

    const alertChartImage = await generateAlertChartImage(alertStats);

    const reportsDir = path.join(__dirname, '..', 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir);
    }

    const formattedDate = new Date().toISOString().split('T')[0];
    const fileName = `report_${siteId}_${formattedDate}_${report._id}.pdf`;
    const filePath = path.join(reportsDir, fileName);

    let currentPage = 1;
    let totalPages = alerts.length > 0 ? 2 : 1;

    const doc = new PDFDocument({ autoFirstPage: false });
    doc.pipe(fs.createWriteStream(filePath));

    const addPageFooter = () => {
      doc.fontSize(8).text(
        `Page ${currentPage} of ${totalPages}`,
        50,
        doc.page.height - 50,
        { align: 'center' }
      );
    };

    const addNewPage = () => {
      doc.addPage();
      currentPage++;
    };

    doc.addPage();

    doc.fontSize(20).text(`Site Report: ${siteId}`, { align: 'center' });
    doc.moveDown();
    doc.fontSize(12).text(`Report Type: ${reportType}`);
    doc.text(`Date Range: ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()}`);
    doc.text(`Generated By: ${generatedBy}`);
    doc.text(`Generated On: ${new Date().toLocaleString()}`);
    doc.moveDown();

    doc.fontSize(16).text('Alert Statistics', { underline: true });
    doc.moveDown(0.5);
    doc.fontSize(12).text(`Total Alerts: ${alertStats.total}`);
    doc.text(`Active Alerts: ${alertStats.active}`);
    doc.text(`Resolved Alerts: ${alertStats.resolved}`);
    doc.moveDown();

    doc.fontSize(16).text('Intervention Statistics', { underline: true });
    doc.moveDown(0.5);
    doc.fontSize(12).text(`Total Interventions: ${interventionStats.total}`);
    doc.moveDown();

    if (alertStats.total > 0) {
      doc.image(alertChartImage, {
        fit: [500, 300],
        align: 'center'
      });
    } else {
      doc.text('No alerts found in the specified date range.', { align: 'center' });
    }

    addPageFooter();

    if (alerts.length > 0) {
      addNewPage();
      
      doc.fontSize(16).text('Alert Details', { underline: true });
      doc.moveDown(0.5);
      
      alerts.forEach((alert, index) => {
        doc.fontSize(12).text(`Alert #${index + 1}: ${alert.message || 'Untitled Alert'}`);
        doc.fontSize(10).text(`ID: ${alert._id}`);
        doc.text(`Status: ${alert.status}`);
        doc.text(`Site ID: ${alert.siteId || alert.site_id}`);
        if (alert.timestamp) doc.text(`Timestamp: ${new Date(alert.timestamp).toLocaleString()}`);
        if (alert.createdAt) doc.text(`Created: ${new Date(alert.createdAt).toLocaleString()}`);
        if (alert.resolvedAt) doc.text(`Resolved: ${new Date(alert.resolvedAt).toLocaleString()}`);
        doc.moveDown();
      });

      addPageFooter();
    }

    doc.end();

    res.status(201).json({
      message: 'Report generated successfully.',
      filePath: filePath,
      report: report,
      alertCount: alerts.length,
      interventionCount: interventions.length
    });

  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
