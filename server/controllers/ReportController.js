exports.generateReport = async (req, res) => {
  try {
    const { siteId, fromDate, toDate, reportType = 'summary', generatedBy = 'system' } = req.body;

    if (!siteId || !fromDate || !toDate) {
      return res.status(400).json({ message: 'Missing required parameters.' });
    }

    const startDate = new Date(fromDate);
    const endDate = new Date(toDate);
    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
      return res.status(400).json({ message: 'Invalid date format.' });
    }

    // Normalize end time to include full day
    if (toDate.length <= 10) {
      endDate.setHours(23, 59, 59, 999);
    }

    // Check if report already exists
    const existingReport = await Report.findOne({
      siteId,
      fromDate: startDate,
      toDate: endDate,
      reportType
    });

    if (existingReport) {
      return res.status(400).json({ message: 'Report already exists for this range and type.' });
    }

    // Fetch alerts
    const alerts = await Alert.find({
      siteId,
      $or: [
        { createdAt: { $gte: startDate, $lte: endDate } },
        { timestamp: { $gte: startDate, $lte: endDate } }
      ]
    });

    const alertStats = {
      total: alerts.length,
      active: alerts.filter(a => a.status === 'active').length,
      resolved: alerts.filter(a => a.status === 'resolved').length
    };

    // Fetch interventions
    const interventions = await Intervention.find({
      siteId,
      createdAt: { $gte: startDate, $lte: endDate }
    });

    const interventionStats = {
      total: interventions.length
    };

    // Save the report record
    const report = new Report({
      siteId,
      reportType,
      fromDate: startDate,
      toDate: endDate,
      generatedBy,
      data: { alertStats, interventionStats }
    });
    await report.save();

    // Generate charts
    const { barChartImage, lineChartImage } = await generateAlertCharts(alertStats);

    // Create reports directory if not exists
    const reportsDir = path.join(__dirname, '..', 'reports');
    if (!fs.existsSync(reportsDir)) fs.mkdirSync(reportsDir);

    const safeDate = new Date().toISOString().split('T')[0];
    const fileName = `report_${siteId}_${safeDate}_${report._id}.pdf`.replace(/[:\/\\?<>|"]/g, '');
    const filePath = path.join(reportsDir, fileName);

    // Create PDF document
    const doc = new PDFDocument({ autoFirstPage: false, margin: 50 });
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    let currentPage = 1;
    const totalPages = alerts.length > 0 ? 3 : 2;

    const addFooter = () => {
      doc.fontSize(8).text(`Page ${currentPage} of ${totalPages}`, 50, doc.page.height - 40, { align: 'center' });
    };

    const addNewPage = () => {
      doc.addPage();
      addFooter();
      currentPage++;
    };

    // Page 1: Summary
    doc.addPage();
    doc.fontSize(20).text(`Site Report: ${siteId}`, { align: 'center' });
    doc.moveDown();
    doc.fontSize(12)
      .text(`Report Type: ${reportType}`)
      .text(`Date Range: ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()}`)
      .text(`Generated By: ${generatedBy}`)
      .text(`Generated On: ${new Date().toLocaleString()}`)
      .moveDown();

    doc.fontSize(16).text('Alert Statistics', { underline: true }).moveDown(0.5);
    doc.fontSize(12)
      .text(`Total Alerts: ${alertStats.total}`)
      .text(`Active Alerts: ${alertStats.active}`)
      .text(`Resolved Alerts: ${alertStats.resolved}`)
      .moveDown();

    doc.fontSize(16).text('Intervention Statistics', { underline: true }).moveDown(0.5);
    doc.fontSize(12).text(`Total Interventions: ${interventionStats.total}`);
    doc.moveDown();

    doc.image(barChartImage, { fit: [500, 280], align: 'center' }).moveDown();
    doc.image(lineChartImage, { fit: [500, 280], align: 'center' });

    addFooter();

    // Page 2: Alerts
    if (alerts.length > 0) {
      addNewPage();
      doc.fontSize(16).text('Alert Details', { underline: true }).moveDown();

      alerts.forEach((alert, index) => {
        doc.fontSize(12).text(`Alert #${index + 1}: ${alert.message || 'Untitled'}`);
        doc.fontSize(10)
          .text(`ID: ${alert._id}`)
          .text(`Status: ${alert.status}`)
          .text(`Site ID: ${alert.siteId}`)
          .text(`Timestamp: ${alert.timestamp ? new Date(alert.timestamp).toLocaleString() : 'N/A'}`)
          .text(`Created At: ${alert.createdAt ? new Date(alert.createdAt).toLocaleString() : 'N/A'}`)
          .text(`Resolved At: ${alert.resolvedAt ? new Date(alert.resolvedAt).toLocaleString() : 'N/A'}`)
          .moveDown();
      });

      addFooter();
    }

    // Optionally add interventions detail page here

    // Finalize PDF
    doc.end();

    stream.on('finish', () => {
      res.status(201).json({
        message: 'Report generated successfully.',
        filePath,
        report,
        alertCount: alerts.length,
        interventionCount: interventions.length
      });
    });

    stream.on('error', (err) => {
      res.status(500).json({ error: 'Error writing PDF file: ' + err.message });
    });

  } catch (err) {
    console.error('Report generation error:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
};
